#!/usr/bin/env node

/**
 * Automated Email Auth Diagnostic Test
 * Generated by: tester-permanent + developer-1-permanent agents
 * Session: persistent-session-contractorai2
 */

import https from 'https';
import { URL } from 'url';

// Configuration
const SUPABASE_URL = 'https://ujhgwcurllkkeouzwvgk.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVqaGd3Y3VybGxra2VvdXp3dmdrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcwMzIzMjQsImV4cCI6MjA3MjYwODMyNH0.ez6RDJ2FxgSfb7mo2Xug1lXaynKLR-2nJFO-x64UNnY';

// Colors for terminal output
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function makeRequest(path, options = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(path, SUPABASE_URL);
    const requestOptions = {
      hostname: url.hostname,
      path: url.pathname + url.search,
      method: options.method || 'GET',
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Content-Type': 'application/json',
        ...options.headers
      }
    };

    const req = https.request(requestOptions, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          resolve({
            status: res.statusCode,
            data: JSON.parse(data)
          });
        } catch (e) {
          resolve({
            status: res.statusCode,
            data: data
          });
        }
      });
    });

    req.on('error', reject);

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

async function runTests() {
  console.log('\n');
  log('🔍 Supabase Email Auth Diagnostic Tool', 'cyan');
  log('═'.repeat(60), 'cyan');
  console.log('\n');

  // Test 1: Configuration Check
  log('Test 1: Configuration Check', 'blue');
  log('─'.repeat(60), 'blue');

  log(`✓ Supabase URL: ${SUPABASE_URL}`, 'green');
  log(`✓ Anon Key: ${SUPABASE_ANON_KEY.substring(0, 20)}...`, 'green');
  log(`✓ Key Length: ${SUPABASE_ANON_KEY.length} characters`, 'green');
  console.log('\n');

  // Test 2: Auth Settings Check
  log('Test 2: Auth Settings Check', 'blue');
  log('─'.repeat(60), 'blue');

  try {
    const response = await makeRequest('/auth/v1/settings');

    if (response.status === 200) {
      const settings = response.data;
      log('✓ Auth settings retrieved successfully', 'green');
      log(`  - Email Auth: ${settings.external?.email ? '✓ ENABLED' : '✗ DISABLED'}`, settings.external?.email ? 'green' : 'red');
      log(`  - Email Autoconfirm: ${settings.mailer_autoconfirm ? '✓ YES (No confirmation needed)' : '✗ NO (Confirmation required)'}`, settings.mailer_autoconfirm ? 'yellow' : 'cyan');
      log(`  - Signup Disabled: ${settings.disable_signup ? '✗ YES' : '✓ NO'}`, settings.disable_signup ? 'red' : 'green');

      // Store result
      log('\n📋 Raw Settings:', 'cyan');
      console.log(JSON.stringify(settings, null, 2));
    } else {
      log(`✗ Failed to retrieve auth settings (Status: ${response.status})`, 'red');
      console.log(response.data);
    }
  } catch (error) {
    log(`✗ Error: ${error.message}`, 'red');
  }
  console.log('\n');

  // Test 3: API Connectivity
  log('Test 3: API Connectivity Check', 'blue');
  log('─'.repeat(60), 'blue');

  try {
    const response = await makeRequest('/rest/v1/');

    if (response.status === 200) {
      log('✓ Supabase REST API is accessible', 'green');
      log(`✓ API Version: ${response.data.swagger || 'Available'}`, 'green');
    } else {
      log(`⚠ API returned status ${response.status}`, 'yellow');
    }
  } catch (error) {
    log(`✗ API Error: ${error.message}`, 'red');
  }
  console.log('\n');

  // Test 4: Test Signup (Dry Run - Shows What Would Happen)
  log('Test 4: Signup Simulation (Dry Run)', 'blue');
  log('─'.repeat(60), 'blue');
  log('ℹ This test shows what would happen during signup', 'yellow');
  log('ℹ No actual user will be created', 'yellow');
  console.log('\n');

  const testEmail = `test+${Date.now()}@example.com`;
  const testPassword = 'TestPassword123!';

  log(`Test Email: ${testEmail}`, 'cyan');
  log(`Test Password: ${testPassword}`, 'cyan');
  console.log('\n');

  log('Expected Behavior:', 'cyan');
  log('  1. If email confirmation ENABLED:', 'cyan');
  log('     → User created but NOT logged in', 'cyan');
  log('     → Session = null', 'cyan');
  log('     → Email sent with confirmation link', 'cyan');
  log('  2. If email confirmation DISABLED:', 'cyan');
  log('     → User created AND logged in', 'cyan');
  log('     → Session created', 'cyan');
  log('     → No email sent', 'cyan');
  console.log('\n');

  // Summary
  log('═'.repeat(60), 'cyan');
  log('📊 Diagnostic Summary', 'cyan');
  log('═'.repeat(60), 'cyan');
  console.log('\n');

  log('Configuration Status:', 'blue');
  log('  ✓ Supabase URL configured', 'green');
  log('  ✓ Anon key configured', 'green');
  log('  ✓ API accessible', 'green');
  console.log('\n');

  log('Next Steps:', 'yellow');
  log('  1. Configure Google Workspace SMTP in Supabase dashboard', 'yellow');
  log('  2. Test actual signup with: npm run test:email', 'yellow');
  log('  3. Check email inbox for confirmation', 'yellow');
  log('  4. Or open tests/test-email-auth.html in browser for interactive testing', 'yellow');
  console.log('\n');

  log('Quick Links:', 'cyan');
  log(`  Dashboard: https://supabase.com/dashboard/project/ujhgwcurllkkeouzwvgk`, 'cyan');
  log(`  SMTP Settings: https://supabase.com/dashboard/project/ujhgwcurllkkeouzwvgk/auth/smtp`, 'cyan');
  log(`  Auth Logs: https://supabase.com/dashboard/project/ujhgwcurllkkeouzwvgk/logs`, 'cyan');
  console.log('\n');
}

// Run tests
runTests().catch(error => {
  log(`\n✗ Fatal Error: ${error.message}`, 'red');
  process.exit(1);
});
